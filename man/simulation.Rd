% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{simulation}
\alias{simulation}
\alias{simulation_data_1D}
\alias{simulation_data_2D}
\alias{simulate_1D}
\title{Generate simulation data used in the paper and vignettes}
\usage{
simulation_data_1D(
  n_points,
  n_obs = 100,
  mu_type = c("step", "sine", "custom"),
  cov_type = c("AR", "exponential", "matern", "any", "iid"),
  custom = NULL,
  corrupt = FALSE,
  ...
)

simulation_data_2D(n_obs = 100, corrupt = FALSE, rho = 0.3, ...)

simulate_1D(
  generator,
  snr = 0.2,
  block_sizes = 21,
  initial_filter = 0.9,
  alpha = 0.05,
  bandwidth = 90
)
}
\arguments{
\item{n_points}{number of hypotheses, less equal than 1000}

\item{n_obs}{number of observations to generate}

\item{mu_type}{underlying function type, choices are 'sine', 'step', and
'custom'}

\item{cov_type}{covariance type, choices are \code{'AR'},
\code{'exponential'}, \code{'matern'},
\code{'any'} (arbitrary dependence), and \code{'iid'} (independent)}

\item{custom}{function to generate mean function if \code{mu_type="custom"}}

\item{corrupt}{whether to use corruption model to generate data instead of
addition model}

\item{...}{passed to internal function; see 'Details'}

\item{rho}{for two-dimensional simulation only, the correlation between
adjacent locations}

\item{generator}{list items returned by \code{simulation_data_1D}}

\item{snr}{positive number to control the signal-to-noise ratio}

\item{block_sizes}{integer vectors to control the block size;
see \code{\link{focr}}}

\item{initial_filter, bandwidth}{used by \code{LAWS} and \code{SABHA}; see
\code{\link{focr}}, \code{\link{fdr-controls}}}

\item{alpha}{'FOCR' and 'FDR' level; default is \code{0.05}}
}
\description{
\code{simulation_data_1D} generates one-dimensional data,
\code{simulation_data_2D} generates two-dimensional image data.
}
\details{
When \code{mu_type} is 'custom', parameter \code{custom} needs to be a
function that takes \code{1:n_points} as input and spit out the underlying
mean function.

When \code{cov_type} is \code{'AR'}, the auto-correlation of adjacent column
will be 0.9; The \code{cov_type="exponential"} and \code{cov_type="matern"}
share the same \code{phi=0.01} (range parameter) but different \code{kappa}
(smoothness parameter). If you wish to change the range or smoothness
parameter, pass \code{phi} and \code{kappa} to \code{...} (see 'Examples').
For \code{'any'} \code{cov_type}, the underlying covariance will be
generated from a real data with arbitrary dependence. For \code{'iid'}
\code{cov_type}, the errors are independent standard normal distributed.

By default, \code{corrupt} is false, then the generated data is an addition
of underlying signal plus random noises. When \code{corrupt} is true, the
underlying signal will be randomly corrupted for each observation. The amount
of corrupted points follows a binomial distribution.
}
\examples{


# -------------------- Basic usage ------------------------
generator <- simulation_data_1D(200, cov_type = 'matern')

# generate date with signal-to-noise ratio = 0.4
data <- generator$gen_data(snr = 0.4)

# Data is n_obs x n_points matrix
dim(data)

image(cor(data), main = 'Matern correlation')

# -------------------- Change Matern parameters ------------------------
# Control kappa/phi here
generator <- simulation_data_1D(200, cov_type = 'matern', kappa = 10)
data <- generator$gen_data(snr = 0.4)

image(cor(data), main = 'Smooth Matern correlation with kappa=10')

# -------------------- 2D data ------------------------
# generate a 2D triangle data
generator <- simulation_data_2D(cov_type = 'AR')
data <- generator$gen_data(snr = 0.6)

par(mfrow = c(1,2))
image(matrix(colMeans(data), 32), main = '2D sample mean')
image(matrix(generator$mu, 32), main = '2D underlying mean')

# -------------------- Simulation used by paper ----------
# might take a while to run
if(interactive()){
  generator <- simulation_data_1D(n_points = 1000, cov_type = 'AR')
  set.seed(1000)
  sim <- simulate_1D(generator, snr = 0.3)
  plot(sim)
}


}
